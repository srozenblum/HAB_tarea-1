"""
Script: analisis_funcional.py

Descripci√≥n:
    Ejecuta un an√°lisis de sobrerrepresentaci√≥n g√©nica (Over-Representation Analysis, ORA)
    usando la herramienta Enrichr de GSEApy. Permite analizar cualquier lista de genes
    humanos en formato HUGO contra bases de datos como GO, KEGG o Reactome, generando
    una tabla de resultados y una visualizaci√≥n de las categor√≠as m√°s significativas.

Entradas:
    input_genes (str): ruta a un archivo de texto con los genes separados por comas
                       o por l√≠neas (s√≠mbolos HUGO).
    output_dir (str): directorio donde se guardar√°n los resultados.
    databases (list[str], opcional): bases de datos a usar (por defecto GO, KEGG, Reactome).

Salidas:
    resultados_ORA.csv ‚Äî tabla con categor√≠as enriquecidas y p-valores ajustados.
    grafica_ORA.png ‚Äî gr√°fico de barras con las categor√≠as m√°s significativas.
"""

import argparse
import os

import gseapy as gp
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


def leer_genes(input_genes: str) -> list[str]:
    """
    Lee un archivo con genes (separados por comas o saltos de l√≠nea) y devuelve una lista.
    """
    if not os.path.exists(input_genes):
        raise FileNotFoundError(f"No se encontr√≥ el archivo de entrada: {input_genes}")

    with open(input_genes, "r") as f:
        contenido = f.read().strip()

    # Aceptar formato separado por comas o l√≠neas
    lista_genes = [g.strip().upper() for g in contenido.replace(",", "\n").splitlines() if g.strip()]
    print(f"‚úÖ {len(lista_genes)} genes le√≠dos desde {os.path.relpath(input_genes)}")
    return lista_genes

def ejecutar_ora(
    input_genes: str,
    output_dir: str,
    databases: list[str] = None
) -> pd.DataFrame:
    """
    Ejecuta un an√°lisis de sobrerrepresentaci√≥n g√©nica (ORA) y guarda resultados y gr√°ficos.

    Par√°metros:
        input_genes (str): archivo con los genes (separados por comas o l√≠neas).
        output_dir (str): directorio donde guardar los resultados.
        databases (list[str], opcional): bases de datos a usar.

    Retorna:
        pd.DataFrame: tabla completa con los resultados del an√°lisis.
    """
    os.makedirs(output_dir, exist_ok=True)

    # Leer genes
    genes = leer_genes(input_genes)

    # Bases de datos por defecto
    if databases is None:
        databases = ["GO_Biological_Process_2021", "KEGG_2021_Human", "Reactome_2022"]

    print(f"üîç Ejecutando an√°lisis funcional ORA en {len(genes)} genes...")
    enr = gp.enrichr(
        gene_list=genes,
        gene_sets=databases,
        organism="Human",
        cutoff=0.05,
    )

    df = enr.results
    if df.empty:
        print("‚ö†Ô∏è No se encontraron t√©rminos significativos.")
        return df

    # Guardar resultados
    output_csv = os.path.join(output_dir, "enrichment_results.csv")
    df.to_csv(output_csv, index=False)
    print(f"‚úÖ Resultados guardados en {os.path.relpath(output_csv)}")

    # Graficar top resultados
    graficar_resultados(df, output_dir, 10)
    return df


def limpiar_texto(text: str, max_palabras: int = 3) -> str:
    """
    Limpia texto de etiquetas GO y reduce longitud para el gr√°fico.
    """
    text = text.split("(")[0].strip()
    palabras = text.split()
    return " ".join(palabras[:max_palabras])


def graficar_resultados(df: pd.DataFrame, output_dir: str, n_resultados: int = 10) -> None:
    """
    Genera un gr√°fico de barras de los n_resultados m√°s significativos.
    """
    df = df.sort_values("Adjusted P-value").head(n_resultados)
    df = df.iloc[::-1].copy()
    df["Term_clean"] = df["Term"].apply(limpiar_texto)

    plt.figure(figsize=(10, 0.6 * len(df)))
    plt.barh(df["Term_clean"], -np.log10(df["Adjusted P-value"]), color="#1976D2")
    plt.xlabel("-log10(Adjusted P-value)", fontsize=12)
    plt.title("Categor√≠as m√°s representadas", fontsize=14, pad=15)
    plt.tight_layout()

    output_png = os.path.join(output_dir, "enrichment_plot.png")
    plt.savefig(output_png)
    plt.close()
    print(f"üìä Gr√°fico guardado en {os.path.relpath(output_png)}")


# === Ejecuci√≥n directa ===
if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="An√°lisis funcional gen√©rico (ORA).")
    parser.add_argument("--input", default="data/genes_input.txt", help="Archivo con genes de entrada (txt con comas o l√≠neas).")
    parser.add_argument("--output", default="results", help="Directorio de salida.")
    parser.add_argument("--databases", nargs="+", default=["GO_Biological_Process_2021", "KEGG_2021_Human", "Reactome_2022"],
                        help="Bases de datos a usar para el an√°lisis (separadas por espacio).")
    parser.add_argument("--graficar", action="store_true",
                        help="Generar gr√°fica de barras.")
    args = parser.parse_args()

    ejecutar_ora(input_genes=args.input, output_dir=args.output, databases=args.databases)

    # Leer archivo de genes
    genes = leer_genes(args.input)

    # Mostrar dataframe de pandas completo
    pd.set_option('display.max_columns', None)
    pd.set_option('display.max_rows', None)
    pd.set_option('display.max_colwidth', None)

    # Ejecutar el an√°lisis
    enr = ejecutar_ora(input_genes=args.input, output_dir=args.output, databases=args.databases)

    if args.graficar:
        graficar_resultados(df=enr, output_dir=args.output)